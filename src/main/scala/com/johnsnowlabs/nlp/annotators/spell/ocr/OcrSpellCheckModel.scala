package com.johnsnowlabs.nlp.annotators.spell.ocr

import com.github.liblevenshtein.transducer.{Candidate, ITransducer}
import com.johnsnowlabs.ml.tensorflow.{TensorflowSpell, TensorflowWrapper}
import com.johnsnowlabs.nlp.annotators.assertion.dl.ReadTensorflowModel
import com.johnsnowlabs.nlp.annotators.ner.Verbose
import com.johnsnowlabs.nlp.{Annotation, AnnotatorModel, AnnotatorType}
import org.apache.spark.ml.util.Identifiable
import org.apache.spark.sql.SparkSession

class OcrSpellCheckModel(override val uid: String) extends AnnotatorModel[OcrSpellCheckModel] with ReadTensorflowModel {

  override val tfFile: String = "spell_model"

  private var tensorflow:TensorflowWrapper = null

  private var transducer:ITransducer[Candidate] = null

  private var specialClassesTransducers: Seq[ITransducer[Candidate]] = null

  private var vocab: Predef.Map[String, Double] = null

  def readModel(path: String, spark: SparkSession, suffix: String): this.type = {
    tensorflow = readTensorflowModel(path, spark, suffix)
    this
  }

  @transient
  private var _model: TensorflowSpell = null

  def model: TensorflowSpell = {
    if (_model == null) {
      require(tensorflow != null, "Tensorflow must be set before usage. Use method setTensorflow() for it.")

      _model = new TensorflowSpell(
        tensorflow,
        Verbose.Silent)
    }
    _model
  }

  /*
  def setTensorflow(tf: TensorflowWrapper): OcrSpellCheckModel = {
    tensorflow = tf
    this
  }*/


  def setVocabTransducer(trans:ITransducer[Candidate]) = {
    transducer = trans
    this
  }

  def setVocab(v: Map[String, Double]) = {
    vocab = v
    this
  }

  def setSpecialClassesTransducers(transducers: Seq[ITransducer[Candidate]]) = {
    specialClassesTransducers = transducers
    this
  }

  /**
    * takes a document and annotations and produces new annotations of this annotator's annotation type
    *
    * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
    * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
    */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = {
    import scala.collection.JavaConversions._
    val allTransducers = specialClassesTransducers :+ transducer

    // TODO integrate the LM!
    //model.predict(Array(Array.empty[String]), Array.empty, Array.empty).foreach(println)

    annotations.map{ annotation =>
      val corrected = annotation.result.split(" ").map { token =>
        // ask each token class for candidates, keep the one with lower cost
        val candidates = allTransducers.flatMap(_.transduce(token, 2))
        val min = candidates.map(_.distance).min

        val candW = candidates.map{ c =>
          val weight = -vocab(c.term) / 60.0 + c.distance.toDouble / token.size
          (c.term, weight)
        }.sortBy(_._2).take(15)


        println(s"""$token -> ${candW.toList.take(7)}""")
        (candidates.minBy(_.distance), min)
      }
      val globalMin = corrected.map(_._2).sum.toString
      annotation.copy(result = corrected.map(_._1.term).mkString(" "),
        metadata = annotation.metadata + ("score" -> globalMin))
    }
  }

  def this() = this(Identifiable.randomUID("SPELL"))

  /** Annotator reference id. Used to identify elements in metadata or to refer to this annotator type */
  override val requiredAnnotatorTypes: Array[String] = Array(AnnotatorType.TOKEN)
  override val annotatorType: AnnotatorType = AnnotatorType.TOKEN

}
